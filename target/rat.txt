
*****************************************************
Summary
-------
Generated at: 2017-05-04T00:59:52-04:00

Notes: 2
Binaries: 3
Archives: 0
Standards: 20

Apache Licensed: 0
Generated Documents: 0

JavaDocs are generated, thus a license header is optional.
Generated files do not require license headers.

19 Unknown Licenses

*****************************************************

Files with unapproved licenses:

  .codepro/deadCodeEntryPoints.xml
  .eclipse-pmd
  .sonar/.sonar_lock
  .sonar/report-task.txt
  pom.xml
  src/com/marist/mscs721/java.hprof.txt
  src/com/marist/mscs721/Meeting.java
  src/com/marist/mscs721/package-info.java
  src/com/marist/mscs721/Room.java
  src/com/marist/mscs721/RoomScheduler.java
  src/com/marist/mscs721/Thread Group2.jmx
  src/test/AddRoomTest.java
  src/test/FindRoomIndexTest.java
  src/test/JUnitTestSuite.java
  src/test/ListRoomTest.java
  src/test/MeetingTest.java
  src/test/NewScheduleMeeting.java
  src/test/RemoveRoomTest.java
  src/test/RoomTest.java
  src/test/ScheduleRoomTest.java

*****************************************************

*****************************************************
  Files with Apache License headers will be marked AL
  Binary files (which do not require any license headers) will be marked B
  Compressed archives will be marked A
  Notices, licenses etc. will be marked N
 !????? .codepro/deadCodeEntryPoints.xml
 !????? .eclipse-pmd
 !????? .sonar/.sonar_lock
 !????? .sonar/report-task.txt
  N     LICENSE.txt
 !YASL1 pom.xml
  N     README.txt
 !????? src/com/marist/mscs721/java.hprof.txt
  B     src/com/marist/mscs721/Meeting.class
 !????? src/com/marist/mscs721/Meeting.java
 !????? src/com/marist/mscs721/package-info.java
  B     src/com/marist/mscs721/Room.class
 !????? src/com/marist/mscs721/Room.java
  B     src/com/marist/mscs721/RoomScheduler.class
 !????? src/com/marist/mscs721/RoomScheduler.java
 !????? src/com/marist/mscs721/Thread Group2.jmx
 !????? src/test/AddRoomTest.java
 !????? src/test/FindRoomIndexTest.java
 !????? src/test/JUnitTestSuite.java
 !????? src/test/ListRoomTest.java
 !????? src/test/MeetingTest.java
 !????? src/test/NewScheduleMeeting.java
 !????? src/test/RemoveRoomTest.java
 !????? src/test/RoomTest.java
 !????? src/test/ScheduleRoomTest.java
 
*****************************************************

 Printing headers for text files without a valid license header...
 
=====================================================
== File: .codepro/deadCodeEntryPoints.xml
=====================================================
<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by Code Pro -->
<entry-points
		version="1">
	<explicit-entry-points/>
	<include-main
			enabled="true"/>
	<include-tests
			enabled="false"/>
	<include-xml
			enabled="true"/>
</entry-points>

=====================================================
== File: .eclipse-pmd
=====================================================
<?xml version="1.0" encoding="UTF-8"?>
<eclipse-pmd xmlns="http://acanda.ch/eclipse-pmd/0.8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://acanda.ch/eclipse-pmd/0.8 http://acanda.ch/eclipse-pmd/eclipse-pmd-0.8.xsd">
  <analysis enabled="true" />
</eclipse-pmd>

=====================================================
== File: .sonar/.sonar_lock
=====================================================

=====================================================
== File: .sonar/report-task.txt
=====================================================
projectKey=RoomScheduler
serverUrl=http://localhost:9000
dashboardUrl=http://localhost:9000/dashboard/index/RoomScheduler
ceTaskId=AVomr7P3DCb31i4LyR22
ceTaskUrl=http://localhost:9000/api/ce/task?id=AVomr7P3DCb31i4LyR22

=====================================================
== File: src/com/marist/mscs721/java.hprof.txt
=====================================================
JAVA PROFILE 1.0.1, created Wed Apr 26 23:47:04 2017

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

=====================================================
== File: src/com/marist/mscs721/Meeting.java
=====================================================
package com.marist.mscs721;

import java.sql.Timestamp;

public class Meeting {
	
	private Timestamp startTime = null;
	private Timestamp stopTime = null;
	private String subject = null;

	
	public Meeting(Timestamp newStartTime, Timestamp newEndTime, String newSubject) {
		setStartTime(newStartTime);
		setStopTime(newEndTime);
		if (newSubject.isEmpty()) {
			setSubject("N/A");
		}
		else {
			setSubject(newSubject);
		}
	}

	public String toString() {
		return this.getStartTime().toString() + " - " + this.getStopTime() + ": " + getSubject();
	}
	
	public Timestamp getStartTime() {
		return startTime;
	}

	public void setStartTime(Timestamp startTime) {
		this.startTime = startTime;
	}

	public Timestamp getStopTime() {
		return stopTime;
	}

	public void setStopTime(Timestamp stopTime) {
		this.stopTime = stopTime;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}


=====================================================
== File: src/com/marist/mscs721/package-info.java
=====================================================
/**
 * @author michael.gildein1@marist.edu
 *
 */
package com.marist.mscs721;

=====================================================
== File: src/com/marist/mscs721/Room.java
=====================================================
package com.marist.mscs721;

import java.util.ArrayList;

public class Room {	
	
	private String name;
	private String building;
	private String location;
	private int capacity;
	private ArrayList<Meeting> meetings;
	
	
	public Room(String newName, int newCapacity) {
		setName(newName);
		setCapacity(newCapacity);
		setMeetings(new ArrayList<Meeting>());
		setBuilding(building);
		setLocation(location);
	}

	public void setLocation(String location) {
		// TODO Auto-generated method stub
		this.location = location;
	}

	public String getLocation() {
		return this.location;
	}
	
	public void setBuilding(String building) {
		// TODO Auto-generated method stub
		this.building = building;
	}
	
	public String getBuilding() {
		return this.building;
	}
	
	public String addNewMeeting(Meeting newMeeting) {
		if(checkSchedule(newMeeting)) {
			getMeetings().add(newMeeting);
			return "Successfully scheduled meeting!";
		} else
			return "Room isn't free";
	}
	
	public boolean checkSchedule(Meeting newMeeting) {
		ArrayList<Meeting> meetingsList = this.meetings;
		for(Meeting m : meetingsList) {

=====================================================
== File: src/com/marist/mscs721/RoomScheduler.java
=====================================================
package com.marist.mscs721;


import java.io.FileWriter;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Scanner;

import org.apache.log4j.PropertyConfigurator;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class RoomScheduler {
	private static final Logger logger = Logger.getLogger(RoomScheduler.class.getName());
	protected static final Scanner keyboard = new Scanner(System.in);
	
	public static void main(String[] args) throws IOException {
		PropertyConfigurator.configure("log4j.properties");
		BasicConfigurator.configure();
		logger.setLevel(Level.INFO);
		logger.trace("Program trace started!");
		Boolean end = false;		
		ArrayList<Room> rooms = new ArrayList<Room>();

		while (!end) {
			switch (mainMenu()) {

			case 1:
				System.out.println(addRoom(rooms));
				break;
			case 2:
				System.out.println(removeRoom(rooms));
				break;
			case 3:
				
				System.out.println(scheduleRoom(rooms));
				break;
			case 4:
				System.out.println(listSchedule(rooms));
				break;
			case 5:
				System.out.println(listRooms(rooms));
				break;
			case 6: 
				getDataFromRoomScheduler(rooms);
				break;

=====================================================
== File: src/com/marist/mscs721/Thread Group2.jmx
=====================================================
<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">25</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1493610245000</longProp>
        <longProp name="ThreadGroup.end_time">1493610245000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Sleep_Time" elementType="Argument">
                <stringProp name="Argument.name">Sleep_Time</stringProp>
                <stringProp name="Argument.value">100</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Sleep_Mask" elementType="Argument">
                <stringProp name="Argument.name">Sleep_Mask</stringProp>
                <stringProp name="Argument.value">0xFF</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Label" elementType="Argument">
                <stringProp name="Argument.name">Label</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResponseCode" elementType="Argument">
                <stringProp name="Argument.name">ResponseCode</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>

=====================================================
== File: src/test/AddRoomTest.java
=====================================================
package test;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;

import org.junit.Assert;
import org.junit.Test;

import com.marist.mscs721.RoomScheduler;
import com.marist.mscs721.*;

/*
 *Test to see if it has same room name
 */
public class AddRoomTest {
	RoomScheduler rs = new RoomScheduler();
	ArrayList<Room> rooms = new ArrayList<Room>();
	
	/*
	 * method which tests out the addRoom() method
	 */
	@Test
	public void addRoomNameTest() {
		Room r = new Room("LB", 5);
		rooms.add(r);
		//rs.addRoom(rooms);
		//checking if it has the same name
		assertEquals(r.getName(), "LB");
	}
}

=====================================================
== File: src/test/FindRoomIndexTest.java
=====================================================
package test;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

import com.marist.mscs721.Room;
import com.marist.mscs721.RoomScheduler;
/**
 * A test case to check the room index
 */
public class FindRoomIndexTest {
	@Test
	public void findRoomIndexTest() {
		RoomScheduler rs = new RoomScheduler();
		ArrayList<Room> rooms = new ArrayList<Room>();
		/**
		 * create a new room
		 * @param room name
		 * @param room capacity
		*/ 
		Room r = new Room("Dn", 5);
		rooms.add(r);
		//tests if the size is equals to 1 or not
		assertEquals(rooms.size(), 1);
	}
}

=====================================================
== File: src/test/JUnitTestSuite.java
=====================================================
package test;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;

@RunWith(Suite.class)
@Suite.SuiteClasses({AddRoomTest.class, RemoveRoomTest.class, 
	ScheduleRoomTest.class, RemoveRoomTest.class, 
	ListRoomTest.class, RoomTest.class, MeetingTest.class})

/**
 * A test suite to run all the tests included in the package
 */
public class JUnitTestSuite {

}

=====================================================
== File: src/test/ListRoomTest.java
=====================================================
package test;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

import com.marist.mscs721.Room;
import com.marist.mscs721.RoomScheduler;
/**
 * Test to check the list of rooms
 */
public class ListRoomTest {
	RoomScheduler rs = new RoomScheduler();
	ArrayList<Room> rooms = new ArrayList<Room>();
	
	@Test
	public void listRoomTest() {
		Room r = new Room("Dn", 4);
		rooms.add(r);
		//rs.addRoom(rooms);
		/**
		 * checks the list of rooms
		 * @param room list
		 */
		rs.listRooms(rooms);
		assertEquals(rooms.size(), 1);
	}
}

=====================================================
== File: src/test/MeetingTest.java
=====================================================
package test;

import static org.junit.Assert.*;

import java.sql.Timestamp;

import org.junit.Test;

import com.marist.mscs721.Meeting;

/**
 * Test case to test the Meeting class*/
public class MeetingTest {
	@Test
	public void meetingTest() {
		//Creates a meeting
		try{
			Meeting m = new Meeting(Timestamp.valueOf("2009-10-02 16:52:30"), Timestamp.valueOf("2009-10-03 16:52:30"), "Testing");
			assertEquals(m.getSubject(), "Testing");
		}catch(IllegalArgumentException e) {
			
		}
		//tests the start time
		//assertEquals(m.getStartTime(), Timestamp.valueOf("2017-01-02 10:00"));
		//tests the end time
		//assertEquals(m.getStopTime(), Timestamp.valueOf("2017-01-02 10:00"));
		//tests the subject
		
	}
}

=====================================================
== File: src/test/NewScheduleMeeting.java
=====================================================
package test;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;

import org.junit.Test;

import com.marist.mscs721.Room;
import com.marist.mscs721.RoomScheduler;

public class NewScheduleMeeting {
	RoomScheduler rs = new RoomScheduler();
	ArrayList<Room> rooms = new ArrayList<Room>();
	
	@Test
	public void newSchedulerMeetingTest() {
		Room r = new Room("Lowell Thomas", 5);
		r.setLocation("Marist Poughkeepsie Campus");
		r.setBuilding("Lowell Thomas");
		
		assertEquals(r.getName(), r.getBuilding());
	}
	
}

=====================================================
== File: src/test/RemoveRoomTest.java
=====================================================
package test;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

import com.marist.mscs721.Room;
import com.marist.mscs721.RoomScheduler;

/*
 * Test class to check if a room is removed
 */
public class RemoveRoomTest {
	RoomScheduler rs = new RoomScheduler();	
	ArrayList<Room> rooms = new ArrayList<Room>();
	/*
	 * test out the removeRoom() method*/
	@Test
	public void removeRoomTest() {
		Room r = new Room("DN", 20);
		//adds the room name into the ArrayList
		rooms.add(r);
		//removes the room from the ArrayList
		rooms.remove(r);
		//rs.removeRoom(rooms);
		//checks if the size is equals to 0
		assertEquals(rooms.size(), 0);
	}
}

=====================================================
== File: src/test/RoomTest.java
=====================================================
package test;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import com.marist.mscs721.Room;
/**
 * Tests the class Room*/
public class RoomTest {
	@Test
	public void roomTest() {
		Room r = new Room("Dn", 4);
		//test the room name
		assertEquals(r.getName(), "Dn");
		//tests the room capacity
		assertEquals(r.getCapacity(), 4);
	}
}

=====================================================
== File: src/test/ScheduleRoomTest.java
=====================================================
package test;

import static org.junit.Assert.assertEquals;

import java.security.Timestamp;
import java.util.ArrayList;

import org.junit.Test;

import com.marist.mscs721.Room;
import com.marist.mscs721.RoomScheduler;
/**
 * A test class to schedule a room with a subject
 */
public class ScheduleRoomTest {
	RoomScheduler rs = new RoomScheduler();
	ArrayList<Room> rooms = new ArrayList<Room>();
	
	@Test
	public void scheduleRoomSubjectTest() {
		//create a room
		Room r1 = new Room("LB", 30);
		rooms.add(r1);
		r1 = rs.getRoomFromName(rooms, "LB");
		String subject = "random";
		//test if the subject is equal or not
		assertEquals(subject, "random");
	}
}

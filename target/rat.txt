
*****************************************************
Summary
-------
Generated at: 2017-05-04T01:15:29-04:00

Notes: 0
Binaries: 3
Archives: 0
Standards: 16

Apache Licensed: 0
Generated Documents: 0

JavaDocs are generated, thus a license header is optional.
Generated files do not require license headers.

15 Unknown Licenses

*****************************************************

Files with unapproved licenses:

  .codepro/deadCodeEntryPoints.xml
  .sonar/.sonar_lock
  .sonar/report-task.txt
  pom.xml
  src/com/marist/mscs721/Meeting.java
  src/com/marist/mscs721/Room.java
  src/com/marist/mscs721/RoomScheduler.java
  src/test/AddRoomTest.java
  src/test/FindRoomIndexTest.java
  src/test/JUnitTestSuite.java
  src/test/ListRoomTest.java
  src/test/MeetingTest.java
  src/test/NewScheduleMeeting.java
  src/test/RemoveRoomTest.java
  src/test/RoomTest.java
  src/test/ScheduleRoomTest.java

*****************************************************

*****************************************************
  Files with Apache License headers will be marked AL
  Binary files (which do not require any license headers) will be marked B
  Compressed archives will be marked A
  Notices, licenses etc. will be marked N
 !????? .codepro/deadCodeEntryPoints.xml
 !????? .sonar/.sonar_lock
 !????? .sonar/report-task.txt
 !YASL1 pom.xml
  B     src/com/marist/mscs721/Meeting.class
 !????? src/com/marist/mscs721/Meeting.java
  B     src/com/marist/mscs721/Room.class
 !????? src/com/marist/mscs721/Room.java
  B     src/com/marist/mscs721/RoomScheduler.class
 !????? src/com/marist/mscs721/RoomScheduler.java
 !????? src/test/AddRoomTest.java
 !????? src/test/FindRoomIndexTest.java
 !????? src/test/JUnitTestSuite.java
 !????? src/test/ListRoomTest.java
 !????? src/test/MeetingTest.java
 !????? src/test/NewScheduleMeeting.java
 !????? src/test/RemoveRoomTest.java
 !????? src/test/RoomTest.java
 !????? src/test/ScheduleRoomTest.java
 
*****************************************************

 Printing headers for text files without a valid license header...
 
=====================================================
== File: .codepro/deadCodeEntryPoints.xml
=====================================================
<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by Code Pro -->
<entry-points
		version="1">
	<explicit-entry-points/>
	<include-main
			enabled="true"/>
	<include-tests
			enabled="false"/>
	<include-xml
			enabled="true"/>
</entry-points>

=====================================================
== File: .sonar/.sonar_lock
=====================================================

=====================================================
== File: .sonar/report-task.txt
=====================================================
projectKey=RoomScheduler
serverUrl=http://localhost:9000
dashboardUrl=http://localhost:9000/dashboard/index/RoomScheduler
ceTaskId=AVomr7P3DCb31i4LyR22
ceTaskUrl=http://localhost:9000/api/ce/task?id=AVomr7P3DCb31i4LyR22

=====================================================
== File: src/com/marist/mscs721/Meeting.java
=====================================================
package com.marist.mscs721;

import java.sql.Timestamp;

public class Meeting {
	
	private Timestamp startTime = null;
	private Timestamp stopTime = null;
	private String subject = null;

	
	public Meeting(Timestamp newStartTime, Timestamp newEndTime, String newSubject) {
		setStartTime(newStartTime);
		setStopTime(newEndTime);
		if (newSubject.isEmpty()) {
			setSubject("N/A");
		}
		else {
			setSubject(newSubject);
		}
	}

	public String toString() {
		return this.getStartTime().toString() + " - " + this.getStopTime() + ": " + getSubject();
	}
	
	public Timestamp getStartTime() {
		return startTime;
	}

	public void setStartTime(Timestamp startTime) {
		this.startTime = startTime;
	}

	public Timestamp getStopTime() {
		return stopTime;
	}

	public void setStopTime(Timestamp stopTime) {
		this.stopTime = stopTime;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}


=====================================================
== File: src/com/marist/mscs721/Room.java
=====================================================
package com.marist.mscs721;

import java.util.ArrayList;

public class Room {	
	
	private String name;
	private String building;
	private String location;
	private int capacity;
	private ArrayList<Meeting> meetings;
	
	
	public Room(String newName, int newCapacity) {
		setName(newName);
		setCapacity(newCapacity);
		setMeetings(new ArrayList<Meeting>());
		setBuilding(building);
		setLocation(location);
	}

	public void setLocation(String location) {
		// TODO Auto-generated method stub
		this.location = location;
	}

	public String getLocation() {
		return this.location;
	}
	
	public void setBuilding(String building) {
		// TODO Auto-generated method stub
		this.building = building;
	}
	
	public String getBuilding() {
		return this.building;
	}
	
	public String addNewMeeting(Meeting newMeeting) {
		if(checkSchedule(newMeeting)) {
			getMeetings().add(newMeeting);
			return "Successfully scheduled meeting!";
		} else
			return "Room isn't free";
	}
	
	public boolean checkSchedule(Meeting newMeeting) {
		ArrayList<Meeting> meetingsList = this.meetings;
		for(Meeting m : meetingsList) {

=====================================================
== File: src/com/marist/mscs721/RoomScheduler.java
=====================================================
package com.marist.mscs721;


import java.io.FileWriter;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Scanner;

import org.apache.log4j.PropertyConfigurator;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class RoomScheduler {
	private static final Logger logger = Logger.getLogger(RoomScheduler.class.getName());
	protected static final Scanner keyboard = new Scanner(System.in);
	
	public static void main(String[] args) throws IOException {
		PropertyConfigurator.configure("log4j.properties");
		BasicConfigurator.configure();
		logger.setLevel(Level.INFO);
		logger.trace("Program trace started!");
		Boolean end = false;		
		ArrayList<Room> rooms = new ArrayList<Room>();

		while (!end) {
			switch (mainMenu()) {

			case 1:
				System.out.println(addRoom(rooms));
				break;
			case 2:
				System.out.println(removeRoom(rooms));
				break;
			case 3:
				
				System.out.println(scheduleRoom(rooms));
				break;
			case 4:
				System.out.println(listSchedule(rooms));
				break;
			case 5:
				System.out.println(listRooms(rooms));
				break;
			case 6: 
				getDataFromRoomScheduler(rooms);
				break;

=====================================================
== File: src/test/AddRoomTest.java
=====================================================
package test;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;

import org.junit.Assert;
import org.junit.Test;

import com.marist.mscs721.RoomScheduler;
import com.marist.mscs721.*;

/*
 *Test to see if it has same room name
 */
public class AddRoomTest {
	RoomScheduler rs = new RoomScheduler();
	ArrayList<Room> rooms = new ArrayList<Room>();
	
	/*
	 * method which tests out the addRoom() method
	 */
	@Test
	public void addRoomNameTest() {
		Room r = new Room("LB", 5);
		rooms.add(r);
		//rs.addRoom(rooms);
		//checking if it has the same name
		assertEquals(r.getName(), "LB");
	}
}

=====================================================
== File: src/test/FindRoomIndexTest.java
=====================================================
package test;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

import com.marist.mscs721.Room;
import com.marist.mscs721.RoomScheduler;
/**
 * A test case to check the room index
 */
public class FindRoomIndexTest {
	@Test
	public void findRoomIndexTest() {
		RoomScheduler rs = new RoomScheduler();
		ArrayList<Room> rooms = new ArrayList<Room>();
		/**
		 * create a new room
		 * @param room name
		 * @param room capacity
		*/ 
		Room r = new Room("Dn", 5);
		rooms.add(r);
		//tests if the size is equals to 1 or not
		assertEquals(rooms.size(), 1);
	}
}

=====================================================
== File: src/test/JUnitTestSuite.java
=====================================================
package test;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;

@RunWith(Suite.class)
@Suite.SuiteClasses({AddRoomTest.class, RemoveRoomTest.class, 
	ScheduleRoomTest.class, RemoveRoomTest.class, 
	ListRoomTest.class, RoomTest.class, MeetingTest.class})

/**
 * A test suite to run all the tests included in the package
 */
public class JUnitTestSuite {

}

=====================================================
== File: src/test/ListRoomTest.java
=====================================================
package test;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

import com.marist.mscs721.Room;
import com.marist.mscs721.RoomScheduler;
/**
 * Test to check the list of rooms
 */
public class ListRoomTest {
	RoomScheduler rs = new RoomScheduler();
	ArrayList<Room> rooms = new ArrayList<Room>();
	
	@Test
	public void listRoomTest() {
		Room r = new Room("Dn", 4);
		rooms.add(r);
		//rs.addRoom(rooms);
		/**
		 * checks the list of rooms
		 * @param room list
		 */
		rs.listRooms(rooms);
		assertEquals(rooms.size(), 1);
	}
}

=====================================================
== File: src/test/MeetingTest.java
=====================================================
package test;

import static org.junit.Assert.*;

import java.sql.Timestamp;

import org.junit.Test;

import com.marist.mscs721.Meeting;

/**
 * Test case to test the Meeting class*/
public class MeetingTest {
	@Test
	public void meetingTest() {
		//Creates a meeting
		try{
			Meeting m = new Meeting(Timestamp.valueOf("2009-10-02 16:52:30"), Timestamp.valueOf("2009-10-03 16:52:30"), "Testing");
			assertEquals(m.getSubject(), "Testing");
		}catch(IllegalArgumentException e) {
			
		}
		//tests the start time
		//assertEquals(m.getStartTime(), Timestamp.valueOf("2017-01-02 10:00"));
		//tests the end time
		//assertEquals(m.getStopTime(), Timestamp.valueOf("2017-01-02 10:00"));
		//tests the subject
		
	}
}

=====================================================
== File: src/test/NewScheduleMeeting.java
=====================================================
package test;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;

import org.junit.Test;

import com.marist.mscs721.Room;
import com.marist.mscs721.RoomScheduler;

public class NewScheduleMeeting {
	RoomScheduler rs = new RoomScheduler();
	ArrayList<Room> rooms = new ArrayList<Room>();
	
	@Test
	public void newSchedulerMeetingTest() {
		Room r = new Room("Lowell Thomas", 5);
		r.setLocation("Marist Poughkeepsie Campus");
		r.setBuilding("Lowell Thomas");
		
		assertEquals(r.getName(), r.getBuilding());
	}
	
}

=====================================================
== File: src/test/RemoveRoomTest.java
=====================================================
package test;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

import com.marist.mscs721.Room;
import com.marist.mscs721.RoomScheduler;

/*
 * Test class to check if a room is removed
 */
public class RemoveRoomTest {
	RoomScheduler rs = new RoomScheduler();	
	ArrayList<Room> rooms = new ArrayList<Room>();
	/*
	 * test out the removeRoom() method*/
	@Test
	public void removeRoomTest() {
		Room r = new Room("DN", 20);
		//adds the room name into the ArrayList
		rooms.add(r);
		//removes the room from the ArrayList
		rooms.remove(r);
		//rs.removeRoom(rooms);
		//checks if the size is equals to 0
		assertEquals(rooms.size(), 0);
	}
}

=====================================================
== File: src/test/RoomTest.java
=====================================================
package test;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import com.marist.mscs721.Room;
/**
 * Tests the class Room*/
public class RoomTest {
	@Test
	public void roomTest() {
		Room r = new Room("Dn", 4);
		//test the room name
		assertEquals(r.getName(), "Dn");
		//tests the room capacity
		assertEquals(r.getCapacity(), 4);
	}
}

=====================================================
== File: src/test/ScheduleRoomTest.java
=====================================================
package test;

import static org.junit.Assert.assertEquals;

import java.security.Timestamp;
import java.util.ArrayList;

import org.junit.Test;

import com.marist.mscs721.Room;
import com.marist.mscs721.RoomScheduler;
/**
 * A test class to schedule a room with a subject
 */
public class ScheduleRoomTest {
	RoomScheduler rs = new RoomScheduler();
	ArrayList<Room> rooms = new ArrayList<Room>();
	
	@Test
	public void scheduleRoomSubjectTest() {
		//create a room
		Room r1 = new Room("LB", 30);
		rooms.add(r1);
		r1 = rs.getRoomFromName(rooms, "LB");
		String subject = "random";
		//test if the subject is equal or not
		assertEquals(subject, "random");
	}
}
